// <auto-generated />
using System;
using DBModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DBModels.Migrations
{
    [DbContext(typeof(MasterDBContext))]
    [Migration("20210104215225_Add datajoined file")]
    partial class Adddatajoinedfile
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("DBModels.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("File");
                });

            modelBuilder.Entity("DBModels.Local", b =>
                {
                    b.Property<int>("LocalId")
                        .HasColumnType("int")
                        .HasColumnName("local_id");

                    b.Property<string>("LocalName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("local_name")
                        .IsFixedLength(true);

                    b.HasKey("LocalId");

                    b.ToTable("Local");
                });

            modelBuilder.Entity("DBModels.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("person_id")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("DateBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_birth");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("full_name");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Phone")
                        .HasColumnType("float")
                        .HasColumnName("phone");

                    b.Property<string>("RegionId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("region_id");

                    b.Property<string>("SocNum")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("soc_num");

                    b.Property<double?>("TaxNum")
                        .HasColumnType("float")
                        .HasColumnName("tax_num");

                    b.HasKey("PersonId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("DBModels.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("position_id")
                        .UseIdentityColumn();

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .HasColumnName("position_name")
                        .IsFixedLength(true);

                    b.HasKey("PositionId");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("DBModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DBModels.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DBModels.Worktime", b =>
                {
                    b.Property<int>("WorktimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("worktime_id")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("Hours")
                        .HasColumnType("int")
                        .HasColumnName("hours");

                    b.Property<int>("LocalId")
                        .HasColumnType("int")
                        .HasColumnName("local_id");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<int>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("position_id");

                    b.HasKey("WorktimeId");

                    b.HasIndex("LocalId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PositionId");

                    b.ToTable("Worktime");
                });

            modelBuilder.Entity("DBModels.File", b =>
                {
                    b.HasOne("DBModels.Person", "Person")
                        .WithMany("Files")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("entity.Property(e => e.Name);")
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DBModels.User", b =>
                {
                    b.HasOne("DBModels.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DBModels.Worktime", b =>
                {
                    b.HasOne("DBModels.Local", "Local")
                        .WithMany("Worktimes")
                        .HasForeignKey("LocalId")
                        .HasConstraintName("FK_Worktime_Local")
                        .IsRequired();

                    b.HasOne("DBModels.Person", "Person")
                        .WithMany("Worktimes")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_Worktime_Personid")
                        .IsRequired();

                    b.HasOne("DBModels.Position", "Position")
                        .WithMany("Worktimes")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_Worktime_Position")
                        .IsRequired();

                    b.Navigation("Local");

                    b.Navigation("Person");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("DBModels.Local", b =>
                {
                    b.Navigation("Worktimes");
                });

            modelBuilder.Entity("DBModels.Person", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Worktimes");
                });

            modelBuilder.Entity("DBModels.Position", b =>
                {
                    b.Navigation("Worktimes");
                });

            modelBuilder.Entity("DBModels.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
